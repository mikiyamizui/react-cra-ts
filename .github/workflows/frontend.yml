on:
  pull_request:
    types: [opened, synchronize, closed]
  push:
    branches: [main]

env:
  ref: ${{ github.head_ref || github.ref_name }}
  github_pages_branch_name: github-pages
  github_pages_branch_dir: docs/${{ github.head_ref || github.ref_name }}
  github_pages_branch_url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ github.head_ref || github.ref_name }}
  artifact_jest_coverage: jest-coverage
  artifact_storybook_coverage: storybook-coverage
  artifact_storybook_static: storybook-static
  artifact_lcov_report: lcov-report
  artifact_lcov_text: lcov-text

# concurrency:
#   group: ${{ github.head_ref || github.ref_name }}-${{ github.workflow }}
#   cancel-in-progress: true

jobs:
  debug:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - run: echo "${{ toJson(github) }}"

  setup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: node
      - uses: actions/cache@v3
        id: cache_node_modules
        with:
          path: "**/node_modules"
          key: node_modules-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/package-lock.json') }}
      - run: npm ci
        if: ${{ steps.cache_node_modules.outputs.cache-hit != 'true' }}

  jest:
    needs: [setup]
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: node
      - uses: actions/cache@v3
        id: cache_node_modules
        with:
          path: "**/node_modules"
          key: node_modules-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/package-lock.json') }}
      - run: npx jest --colors --coverage --coverageDirectory coverage --passWithNoTests
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_jest_coverage }}
          path: coverage/coverage-final.json

  storybook:
    needs: [setup]
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: node
      - uses: actions/cache@v3
        id: cache_node_modules
        with:
          path: "**/node_modules"
          key: node_modules-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/package-lock.json') }}
      - run: npx storybook build
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_storybook_static }}
          path: storybook-static
      - run: npx playwright install --with-deps chromium
      - run: >
          npx concurrently -k -s first -n "storybook,test" -c "magenta,blue"
          "npx http-server storybook-static --port 6006 --silent"
          "wait-on tcp:6006 && npx test-storybook --coverage --browsers chromium"
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_storybook_coverage }}
          path: coverage/storybook/coverage-storybook.json

  lcov:
    needs: [jest, storybook]
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.artifact_jest_coverage }}
          path: coverage
        continue-on-error: true
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.artifact_storybook_coverage }}
          path: coverage
        continue-on-error: true
      - run: npx nyc report -t coverage --reporter=lcov --report-dir coverage
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_lcov_report }}
          path: coverage/lcov-report
      - run: npx nyc report -t coverage --reporter=text > coverage/lcov-text
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_lcov_text }}
          path: coverage/lcov-text

  github-pages:
    needs: [lcov]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
      pull-requests: write
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.github_pages_branch_name }}
      - run: rm -rf ${{ env.github_pages_branch_dir }}
      - uses: actions/download-artifact@v3
        id: download_artifact_lcov_report
        with:
          name: ${{ env.artifact_lcov_report }}
          path: ${{ env.github_pages_branch_dir }}/lcov-report
        continue-on-error: true
      - uses: actions/download-artifact@v3
        id: download_artifact_lcov_text
        with:
          name: ${{ env.artifact_lcov_text }}
          path: ${{ env.github_pages_branch_dir }}/lcov-text
        continue-on-error: true
      - uses: actions/download-artifact@v3
        id: download_artifact_storybook_static
        with:
          name: ${{ env.artifact_storybook_static }}
          path: ${{ env.github_pages_branch_dir }}/storybook
        continue-on-error: true
      # - name: Git commit and push
      #   run: |
      #     cat << EOF > commit-message
      #     ${{
      #       (github.event_name == 'pull_request' && format('{0} (PR #{1} {2})', env.ref, github.event.pull_request.number, github.event.action)) ||
      #       format('{0} ({1})', env.ref, github.event_name)
      #     }}
      #     ${{ (github.event.after != '' && format('Triggered via commit {0}', github.event.after)) || '' }}
      #     Action: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      #     ${{
      #       (steps.download_artifact_lcov_report.outcome == 'success' && 'Updated') ||
      #       'Deleted'
      #     }}: ${{ env.github_pages_branch_url }}/lcov-report
      #     ${{
      #       (steps.download_artifact_storybook_static.outcome == 'success' && 'Updated') ||
      #       'Deleted'
      #     }}: ${{ env.github_pages_branch_url }}/storybook
      #     EOF
      #     git config --local user.name "${{ github.workflow }}"
      #     git config --local user.email ""
      #     git add docs
      #     git commit -F commit-message
      #     git push origin ${{ env.github_pages_branch_name }}
      - name: Git commit and push
        run: |
          cat << EOF > commit-message
          ${{ env.ref }} (${{ github.event_name }})
          ${{ (github.event.after != '' && format('Triggered via commit {0}', github.event.after)) || '' }}
          Action: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          ${{
            (steps.download_artifact_lcov_report.outcome == 'success' && 'Updated') ||
            'Deleted'
          }}: ${{ env.github_pages_branch_url }}/lcov-report
          ${{
            (steps.download_artifact_storybook_static.outcome == 'success' && 'Updated') ||
            'Deleted'
          }}: ${{ env.github_pages_branch_url }}/storybook
          EOF
          git config --local user.name "${{ github.workflow }}"
          git config --local user.email ""
          git add docs
          git commit -F commit-message
          git push origin ${{ env.github_pages_branch_name }}
      - run: |
          cat << EOF >> pr-comment
          ### Coverage
          ${{ env.github_pages_branch_url }}/lcov-report
          EOF
      - run: cat ${{ env.github_pages_branch_dir }}/lcov-text >> pr-comment
      - run: |
          cat << EOF >> pr-comment
          ### Storybook
          ${{ env.github_pages_branch_url }}/storybook
          EOF
      # - run: gh pr comment -F ./pr-comment "${{ github.event.pull_request.html_url }}"
      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: github-pages
          message: pr-comment
